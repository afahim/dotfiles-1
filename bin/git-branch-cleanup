#!/usr/bin/env perl

=head1 NAME

    git-branch-cleanup - remove local or remote dead branches

=head1 SYNOPSIS

    git-branch-cleanup [options] [remote ...]

     Options:
       --all            Delete all non-blacklisted branches, non-interactively.
       --blacklist      Add the next string in the command-line to the blacklist.
                            Contains 'master' and 'HEAD' no matter what.
       --dry_run|-n     Do not execute removal commands, just print what would have been done.
       --help|-?        This help message.
       --interactive    Interactively approve the branch to be deleted.
                            Turned on by default.
       --merged_only    Only delete branches that have been merged into upstream/master.
       --regex <re>     Only delete branches that match this regular expression.
       --remotes|-r     Do this on the selected remotes.
                            Defaults to origin.
       --verbose        Print extra information.

=cut


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage qw/pod2usage/;

our $BLACKLIST = 'master|HEAD';
our $GIT_BRANCH_COMMAND = 'git branch';
our $MERGED_ONLY = '';
our @REMOTES = q{origin};
our $REMOTES = qr{(?!)};

our($do_remotes, $dry_run, $interactive, $regex, $verbose);
$interactive = 1;

GetOptions(
           'all'           => sub { $interactive = 0; },
           'blacklist=s@'  => sub { $BLACKLIST .= "|$_" },
           'dry_run|n'     => \$dry_run,
           'help|?'        => sub { pod2usage(); },
           'interactive'   => \$interactive,
           'merged_only'   => sub { $MERGED_ONLY = ' --merged upstream/master' },
           'regex=s'       => \$regex,
           'remotes'       => \$do_remotes,
           'verbose'       => \$verbose,
);

if( @ARGV ){
    @REMOTES = @ARGV;
}

my $remote_branches;
if( $do_remotes ) {
    $remote_branches = generate_remote_branches(\@REMOTES, $MERGED_ONLY, $verbose);
}

$BLACKLIST = qr{$BLACKLIST};

my $git_branch_command = "git branch $MERGED_ONLY";
open BRANCHES_FH, "$git_branch_command |" or die "Couldn't open '$git_branch_command': $!";

my $branch;
while( $branch = <BRANCHES_FH> ){
    $branch =~ s/\A\s+|\s+\Z//g;

    print "Processing branch $branch\n" if $verbose;

    if( $branch =~ /^\s*\*/ ){
        print "Skipping the current branch $branch\n" if $verbose;
        next;
    }
    elsif( $BLACKLIST and $branch =~ $BLACKLIST ){
        print "Skipping blacklisted branch: $branch\n" if $verbose;
        next;
    }
    elsif( $regex and $branch !~ m{$regex} ){
        print "Skipping regex miss: $branch\n" if $verbose;
        next;
    }

    if( $interactive ){
        print "Delete branch '$branch'? [Y/n/q] ";
        my $input = <STDIN>;
        exit 0 if $input =~ /^\s*q/i;
        next if $input =~ /^\s*n/i;
    }

    print "git branch -D $branch\n" if $verbose or $dry_run;
    system("git branch -D $branch") unless $dry_run;

    if( $do_remotes ){
        foreach my $remote (@{$remote_branches->{$branch}}){
            print "git push $remote :$branch\n" if $verbose or $dry_run;
            system("git push $remote :$branch") unless $dry_run;
        }
    }
}

sub generate_remote_branches {
    my($REMOTES, $MERGED_ONLY, $verbose) = @_;
    my %remote_branches;

    foreach my $remote (@$REMOTES) {
        print "git fetch $remote\n" if $verbose;
        `git fetch $remote`;

        my $git_branch_command = "git branch -r $MERGED_ONLY";
        open BRANCHES_FH, "$git_branch_command |" or die "Couldn't open '$git_branch_command': $!";
        my $remote_branch;
        while($remote_branch = <BRANCHES_FH>){
            chomp $remote_branch;
            my($branch_name) = $remote_branch =~ m{$remote/(\S+)};
            push @{$remote_branches{$branch_name}}, $remote;
        }
        close BRANCHES_FH;
    }

    return \%remote_branches;
}
